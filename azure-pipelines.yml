trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  qaFrontendAppName: 'blogapi-front-qa'
  qaBackendAppName: 'blogapi-back-qa'
  qaFrontendUrl: 'https://blogapi-front-qa-bhd4cqfxd0ejegd5.canadacentral-01.azurewebsites.net/'
  prodFrontendAppName: 'blogapi-front-prod'
  prodBackendAppName: 'blogapi-back-prod'

stages:
  - stage: BuildAndDeployQA
    displayName: 'Build and Deploy to QA'
    jobs:
      - job: FrontendBuildDeploy
        displayName: 'Frontend Build and Deploy'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - checkout: self  # Asegura que todo el código del repo se clone
          persistCredentials: true
          fetchDepth: 0

        - task: NodeTool@0
          displayName: 'Use Node.js 18'
          inputs:
             versionSpec: '18.x'
      - job: BackendBuildDeploy
        displayName: 'Backend Build and Deploy'
        dependsOn: FrontendBuildDeploy
        pool:
          vmImage: 'windows-latest'
        steps:
          - task: UseDotNet@2
            displayName: 'Install .NET SDK'
            inputs:
              packageType: 'sdk'
              version: '8.0.x'
              installationPath: $(Agent.ToolsDirectory)/dotnet

          - script: |
              echo "Construyendo el backend..."
              dotnet build final.sln
              echo "Publicando el backend..."

            displayName: 'Build, Publish and Unit Test Backend'


          - task: PublishBuildArtifacts@1
            displayName: 'Publish Backend Artifacts'
            inputs:
              publishLocation: 'Container'
              artifactName: 'backendBuild'
              targetPath: $(Build.ArtifactStagingDirectory)/backendBuild

          - task: DownloadBuildArtifacts@0
            displayName: 'Download Backend Artifacts'
            inputs:
              buildType: 'current'
              artifactName: 'backendBuild'
              downloadPath: $(Build.ArtifactStagingDirectory)
          - script: echo $(Build.ArtifactStagingDirectory)
            displayName: 'Show Artifact Staging Directory'
          - task: AzureWebApp@1
            displayName: 'Deploy Backend to Prod'
            inputs:
              azureSubscription: 'Student-Subs'
              appName: $(prodBackendAppName)
              package: $(Build.ArtifactStagingDirectory)/backendBuild

  - stage: DeployToProduction
    displayName: 'Deploy to Production'
    dependsOn: BuildAndDeployQA
    condition: succeeded()
    jobs:
      - deployment: DeployToProd  # Cambio aquí para usar un "deployment job"
        displayName: 'Deploy to Production'
        environment: 'Production'  # Especifica el Environment
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                # Descargamos los artefactos del backend
                - task: DownloadBuildArtifacts@0
                  displayName: 'Download Backend Artifacts'
                  inputs:
                    buildType: 'current'
                    artifactName: 'backendBuild'
                    downloadPath: $(Build.ArtifactStagingDirectory)

                - script: echo $(Build.ArtifactStagingDirectory)
                  displayName: 'Show Artifact Staging Directory'

                # Desplegar el backend a producción
                - task: AzureWebApp@1
                  displayName: 'Deploy Backend to Prod'
                  inputs:
                    azureSubscription: 'Student-Subs'
                    appName: $(prodBackendAppName)
                    package: $(Build.ArtifactStagingDirectory)/backendBuild


